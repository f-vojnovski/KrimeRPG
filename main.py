from nextcord.ext import commands, tasks
import nextcord
import pymongo
from pymongo import MongoClient
import time
from datetime import datetime
from pytz import timezone
import traceback

from botdata import *
from util import *

# Top of Main.py

from webserver import keep_alive
import os

BOT_PREFIX = '$'
SUBSTANCES_CHANNEL_ID = 900828357996986388
BUSINESSES_CHANNEL_ID = 900828437005074452

# BOT SETUP
client = commands.Bot(command_prefix=BOT_PREFIX, case_insensitive=True)
client.remove_command('help')

# DATABASE SETUP
MONGO_CONN_STRING = os.environ['MONGO_CONN_STRING']

cluster = MongoClient(MONGO_CONN_STRING)
db = cluster['krime-bot']
user_collection = db['users']
drugs_collection = db['substances']
config_vars_collection = db['config_vars']
user_drug_collection = db['user_substance_storage']
user_gun_collection = db['user_gun_collection']
user_car_collection = db['user_car_collection']
business_collection = db['business_collection']


# BOT READY CHECK
@client.event
async def on_ready():
    print('Krime bot is ready!')

    change_drug_prices.start()
    cash_in_business.start()


@client.command(pass_context=True)
async def signup(ctx):
    try:
        post = {"_id": ctx.message.author.id, "health": max_health, "money": 0, "xp": 0, "heal_cd": 0, "jail_cd": 0,
                "crime_cd": 0, "death_cd": 0, "atk_cd": 0}
        user_collection.insert_one(post)

        await ctx.send(f"–î–æ–±—Ä–µ–¥–æ—ò–¥–µ –≤–æ —Å–≤–µ—Ç–æ—Ç –Ω–∞ –∫—Ä–∏–º–∏–Ω–∞–ª–æ—Ç, **{ctx.message.author.name}**. üëãüéâ")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='stats')
async def show_user_stats(ctx):
    try:
        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        level = get_level_based_on_xp(user_data['xp'])

        await ctx.send(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ **{author_name}:**\n–ï–Ω–µ—Ä–≥–∏—ò–∞:**ü©∏{user_data['health']}**, –ü–∞—Ä–∏: **üíµ{user_data['money']}**, –ù–∏–≤–æ: **{level + 1}**, XP –¥–æ —Å–ª–µ–¥–Ω–æ –Ω–∏–≤–æ: **{get_xp_to_next_level(level, user_data['xp'])}**.")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='respawn')
async def respawn(ctx):
    try:
        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        curr_time = int(time.time())
        if user_data['death_cd'] >= curr_time:
            remaining_death_time = user_data['death_cd'] - curr_time
            await ctx.send(
                f"–¢—Ä–µ–±–∞ –¥–∞ –ø–æ—á–µ–∫–∞—Ç–µ —É—à—Ç–µ **{get_formatted_min_secs(remaining_death_time)}** –ø—Ä–µ–¥ –¥–∞ respawn-–µ—Ç–µ.")
            return

        user_collection.update_one({'_id': author_id}, {"$set": {'death_cd': 0}}, upsert=False)
        user_collection.update_one({'_id': author_id}, {"$set": {'health': max_health}}, upsert=False)
        await ctx.send(f"**{author_name}** —Å–µ –≤—Ä–∞—Ç–∏ –≤–æ –∏–≥—Ä–∞! üòä")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='crime')
async def commit_crime(ctx, arg):
    try:
        selected_crime = None

        for crime in crimes:
            if arg.lower() == crime['command'].lower():
                selected_crime = crime
                break

        if selected_crime is None:
            await ctx.send('–ö—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.')
            return

        player_name = ctx.message.author.name
        author_id = ctx.message.author.id

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**.")
            return

        if user_data['crime_cd'] >= curr_time:
            remaining_crime_cd = user_data['crime_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ –∏–∑–≤—Ä—à–∏–≤—Ç–µ –∫—Ä–∏–º–∏–Ω–∞–ª —Å–∫–æ—Ä–æ. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_crime_cd)}**.")
            return

        crime_cd = curr_time + selected_crime['crime_cd']
        user_collection.update_one({'_id': author_id}, {"$set": {'crime_cd': crime_cd}}, upsert=False)

        player_level = get_level_based_on_xp(user_data['xp'])
        crime_successful = check_event_based_on_probability(
            selected_crime['success_chance'] * levels[player_level]['crime_factor'])

        if crime_successful:
            money_gained = random.randint(selected_crime['min_profit'], selected_crime['max_profit'])
            xp_gained = random.randint(selected_crime['min_xp'], selected_crime['max_xp'])

            new_balance = user_data['money'] + money_gained
            user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)

            new_xp = user_data['xp'] + xp_gained
            if new_xp >= levels[19]['xp']:
                new_xp = levels[19]['xp']

            user_collection.update_one({'_id': author_id}, {"$set": {'xp': new_xp}}, upsert=False)

            embed = nextcord.Embed(
                title=f'{player_name} —É—Å–ø–µ—à–Ω–æ –≥–æ –∏–∑–≤—Ä—à–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ!',
                colour=nextcord.Colour.from_rgb(241, 196, 15)
            )

            embed.add_field(name='–ó–∞—Ä–∞–±–æ—Ç–µ–Ω–∏ –ø–∞—Ä–∏:', value=f"üíµ{money_gained}")
            embed.add_field(name='–î–æ–±–∏–µ–Ω–æ XP:', value=f"{xp_gained}")

            author_level = get_level_based_on_xp(user_data['xp'])
            new_level = get_level_based_on_xp(new_xp)
            if new_level != author_level:
                embed.add_field(name='–ß–µ—Å—Ç–∏—Ç–∫–∏!', value=f"{player_name} –∫–∞—á–∏ {new_level + 1} –Ω–∏–≤–æ.üéâüéà", inline=False)

            embed.set_image(url=random.choice(crime_successful_images))
            await ctx.send(embed=embed)
            return

        crime_escaped = check_event_based_on_probability(selected_crime['escape_chance'] * levels[player_level]['crime_factor'])

        if (crime_escaped):
            await ctx.send(
                f"**{player_name}** –Ω–µ —É—Å–ø–µ–∞ –¥–∞ –≥–æ –∏–∑–≤—Ä—à–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ üò¢, –Ω–æ –∑–∞ —Å—Ä–µ—ú–∞ —É—Å–ø–µ–∞ –¥–∞ –ø–æ–±–µ–≥–Ω–µ –æ–¥ –ø–æ–ª–∏—Ü–∏—ò–∞—Ç–∞üöì.")
            return

        jail_time = random.randint(selected_crime['min_jail_time'], selected_crime['max_jail_time'])
        jail_cd = curr_time + jail_time
        user_collection.update_one({'_id': author_id}, {"$set": {'jail_cd': jail_cd}}, upsert=False)

        embed = nextcord.Embed(
            title=f'–ü–æ–ª–∏—Ü–∏—ò–∞—Ç–∞üöì –≥–æ —Ñ–∞—Ç–∏ {player_name} –∏ –≥–æ –æ–¥–Ω–µ—Å–µ –≤–æ –∑–∞—Ç–≤–æ—Ä!üò≠üò≠üò≠',
            colour=nextcord.Colour.from_rgb(241, 196, 15)
        )

        embed.add_field(name='–ò–∑—Ä–µ—á–µ–Ω–∞ –ø—Ä–µ—Å—É–¥–∞:', value=f"{jail_time} —Å–µ–∫—É–Ω–¥–∏ –≤–æ –∑–∞—Ç–≤–æ—Ä.")

        embed.set_image(url=random.choice(crime_caught_images))
        await ctx.send(embed=embed)
    except:
        await ctx.send(await ctx.send(traceback.format_exc()))


@client.command(name='armedcrime')
async def commit_armed_crime(ctx, arg1, arg2):
    try:
        selected_crime = None

        for crime in armed_crimes:
            if arg1.lower() == crime['command'].lower():
                selected_crime = crime
                break

        if selected_crime is None:
            await ctx.send('–ö—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.')
            return

        selected_gun = None
        for gun in gun_data:
            if gun['name'] == arg2:
                selected_gun = gun
                break

        if selected_gun is None:
            await ctx.send('–û—Ä—É–∂—ò–µ—Ç–æ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.')
            return

        player_name = ctx.message.author.name
        author_id = ctx.message.author.id

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**.")
            return

        if user_data['crime_cd'] >= curr_time:
            remaining_crime_cd = user_data['crime_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ –∏–∑–≤—Ä—à–∏–≤—Ç–µ –∫—Ä–∏–º–∏–Ω–∞–ª —Å–∫–æ—Ä–æ. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_crime_cd)}**.")
            return

        user_guns = user_gun_collection.find_one({'_id': author_id})['value']

        user_gun_arr_index = -1
        for i in range(0, len(user_guns)):
            if user_guns[i] == selected_gun['id']:
                user_gun_arr_index = i
                break

        if user_gun_arr_index == -1:
            await ctx.send('–í–∏–µ –Ω–µ –≥–æ –ø–æ—Å–µ–¥—É–≤–∞—Ç–µ —Ç–æ–∞ –æ—Ä—É–∂—ò–µ.')
            return

        crime_cd = curr_time + selected_crime['crime_cd']
        user_collection.update_one({'_id': author_id}, {"$set": {'crime_cd': crime_cd}}, upsert=False)

        player_level = get_level_based_on_xp(user_data['xp'])
        crime_successful = check_event_based_on_probability(
            selected_crime['success_chance'] * levels[player_level]['crime_factor'] * selected_gun['effectiveness'])

        if crime_successful:
            money_gained = random.randint(selected_crime['min_profit'], selected_crime['max_profit'])
            xp_gained = random.randint(selected_crime['min_xp'], selected_crime['max_xp'])

            new_balance = user_data['money'] + money_gained
            user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)

            new_xp = user_data['xp'] + xp_gained
            if new_xp >= levels[19]['xp']:
                new_xp = levels[19]['xp']

            user_collection.update_one({'_id': author_id}, {"$set": {'xp': new_xp}}, upsert=False)

            embed = nextcord.Embed(
                title=f'{player_name} —É—Å–ø–µ—à–Ω–æ –≥–æ –∏–∑–≤—Ä—à–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ!',
                colour=nextcord.Colour.from_rgb(241, 196, 15)
            )

            if check_event_based_on_probability(selected_gun['break_chance']):
                del [user_guns[user_gun_arr_index]]
                user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_guns}})
                embed.add_field(name='–û—Ä—É–∂—ò–µ—Ç–æ –±–µ—à–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –æ–¥ –ø–æ–ª—Ü–∏—ò–∞—Ç–∞.',
                                value=f"{ctx.message.author.name} –º–æ—Ä–∞—à–µ –¥–∞ —Å–µ –æ—Å–ª–æ–±–æ–¥–∏ –æ–¥ –æ—Ä—É–∂—ò–µ—Ç–æ.", inline=False)

            embed.add_field(name='–ó–∞—Ä–∞–±–æ—Ç–µ–Ω–∏ –ø–∞—Ä–∏:', value=f"üíµ{money_gained}")
            embed.add_field(name='–î–æ–±–∏–µ–Ω–æ XP:', value=f"{xp_gained}")

            author_level = get_level_based_on_xp(user_data['xp'])
            new_level = get_level_based_on_xp(new_xp)
            if new_level != author_level:
                embed.add_field(name='–ß–µ—Å—Ç–∏—Ç–∫–∏!', value=f"{player_name} –∫–∞—á–∏ {new_level + 1} –Ω–∏–≤–æ.üéâüéà", inline=False)

            embed.set_image(url=random.choice(crime_successful_images))
            await ctx.send(embed=embed)
            return

        crime_escaped = check_event_based_on_probability(selected_crime['escape_chance'] * levels[player_level]['crime_factor'])

        if crime_escaped:
            await ctx.send(
                f"**{player_name}** –Ω–µ —É—Å–ø–µ–∞ –¥–∞ –≥–æ –∏–∑–≤—Ä—à–∏ –∫—Ä–∏–º–∏–Ω–∞–ª–Ω–æ—Ç–æ –¥–µ–ª–æ üò¢, –Ω–æ –∑–∞ —Å—Ä–µ—ú–∞ —É—Å–ø–µ–∞ –¥–∞ –ø–æ–±–µ–≥–Ω–µ –æ–¥ –ø–æ–ª–∏—Ü–∏—ò–∞—Ç–∞üöì.")
            return

        jail_time = random.randint(selected_crime['min_jail_time'], selected_crime['max_jail_time'])
        jail_cd = curr_time + jail_time
        user_collection.update_one({'_id': author_id}, {"$set": {'jail_cd': jail_cd}}, upsert=False)

        embed = nextcord.Embed(
            title=f'–ü–æ–ª–∏—Ü–∏—ò–∞—Ç–∞üöì –≥–æ —Ñ–∞—Ç–∏ {player_name} –∏ –≥–æ –æ–¥–Ω–µ—Å–µ –≤–æ –∑–∞—Ç–≤–æ—Ä!üò≠üò≠üò≠',
            colour=nextcord.Colour.from_rgb(241, 196, 15)
        )

        del [user_guns[user_gun_arr_index]]
        user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_guns}})

        embed.add_field(name='–ò–∑—Ä–µ—á–µ–Ω–∞ –ø—Ä–µ—Å—É–¥–∞:', value=f"{jail_time} —Å–µ–∫—É–Ω–¥–∏ –≤–æ –∑–∞—Ç–≤–æ—Ä.")

        embed.set_image(url=random.choice(crime_caught_images))
        await ctx.send(embed=embed)
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='buydrugs', pass_context=True)
async def buy_drugs(ctx, arg1, arg2):
    try:
        try:
            int(arg2)
        except ValueError:
            await ctx.send('–í–Ω–µ—Å–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∫–æ–ª–∏—á–∏–Ω–∞!')
            return

        buying_amount = int(arg2)

        if buying_amount <= 0:
            await ctx.send('–í–Ω–µ—Å–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∫–æ–ª–∏—á–∏–Ω–∞!')
            return

        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        selected_drug = None

        for drug in substances_data:
            if drug['name'] == arg1:
                selected_drug = drug

        if selected_drug is None:
            await ctx.send(
                f'–î–∞–¥–µ–Ω–∞—Ç–∞ —Å—É–ø—Å—Ç–∞–Ω—Ü–∏—ò–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞ –Ω–∞ —Ü—Ä–Ω–∏–æ—Ç –ø–∞–∑–∞—Ä. –ó–∞ –ª–∏—Å—Ç–∞ –Ω–∞ —Å—É–ø—Å—Ç–∞–Ω—Ü–∏–∏ –ø–æ–≥–ª–µ–¥–Ω–µ—Ç–µ –≥–æ —Ç—É—Ç–æ—Ä–∏—ò–∞–ª–æ—Ç.')
            return

        user_data = user_collection.find_one({"_id": author_id})

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**.")
            return

        drug_user_storage = user_drug_collection.find_one({"_id": f"{author_id} {selected_drug['id']}"})

        drug_in_database = drugs_collection.find_one({"_id": selected_drug['id']})
        drug_price = drug_in_database['price'] * buying_amount

        if user_data['money'] < drug_price:
            await ctx.send('–ù–µ–º–∞—Ç–µ –¥–æ–≤–æ–ª–Ω–æ –ø–∞—Ä–∏.')
            return

        if drug_user_storage is None:
            new_amount = buying_amount
            if new_amount > selected_drug['max_amount']:
                await ctx.send(f"–ú–æ–∂–µ –¥–∞ –∫—É–ø–∏—Ç–µ –º–∞–∫—Å–∏–º—É–º {selected_drug['max_amount']}kg {selected_drug['name']}.")
                return

            user_drug_collection.insert_one(
                {'_id': f"{author_id} {selected_drug['id']}", 'user': author_id, 'amount': new_amount})
        else:
            curr_amount = int(drug_user_storage['amount'])
            new_amount = curr_amount + buying_amount
            if new_amount > selected_drug['max_amount']:
                await ctx.send(
                    f"–ú–æ–∂–µ –¥–∞ –ø–æ—Å–µ–¥—É–≤–∞—Ç–µ –º–∞–∫—Å–∏–º—É–º {selected_drug['max_amount']}kg {selected_drug['name']} –≤–æ –¥–∞–¥–µ–Ω –º–æ–º–µ–Ω—Ç. –ú–∞–∫—Å–∏–º—É–º –∫–æ–ª–∏—á–∏–Ω–∞ –∫–æ—ò–∞ —à—Ç–æ –º–æ–∂–µ –¥–∞ —ò–∞ –∫—É–ø–∏—Ç–µ –æ–¥ –æ–≤–∞–∞ —Å—É–ø—Å—Ç–∞–Ω—Ü–∞: {selected_drug['max_amount'] - curr_amount}kg.")
                return
            user_drug_collection.update_one({'_id': f"{author_id} {selected_drug['id']}"},
                                            {"$set": {'amount': new_amount}},
                                            upsert=False)

        new_balance = user_data['money'] - drug_price
        user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)
        await ctx.send(f'**{author_name}** –∫—É–ø–∏ {buying_amount}kg {arg1}.')
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='selldrugs', pass_context=True)
async def sell_drugs(ctx, arg1, arg2):
    try:
        try:
            int(arg2)
        except ValueError:
            await ctx.send('–í–Ω–µ—Å–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∫–æ–ª–∏—á–∏–Ω–∞!')
            return

        selling_amount = int(arg2)

        if selling_amount <= 0:
            await ctx.send('–í–Ω–µ—Å–µ–Ω–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞ –∫–æ–ª–∏—á–∏–Ω–∞!')
            return

        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        selected_drug = None

        for drug in substances_data:
            if drug['name'] == arg1:
                selected_drug = drug

        if selected_drug is None:
            await ctx.send('–î–∞–¥–µ–Ω–∞—Ç–∞ —Å—É–ø—Å—Ç–∞–Ω—Ü–∏—ò–∞ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–∞ –≤–æ –≤–∞—à–∏–æ—Ç –º–∞–≥–∞—Ü–∏–Ω.')
            return

        user_data = user_collection.find_one({"_id": author_id})

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**.")
            return

        drug_user_storage = user_drug_collection.find_one({"_id": f"{author_id} {selected_drug['id']}"})

        if drug_user_storage is None:
            await ctx.send('–à–∞ –Ω–µ–º–∞—Ç–µ –æ–≤–∞–∞ —Ä–æ–±–∞ –≤–æ –≤–∞—à–∏–æ—Ç –º–∞–≥–∞—Ü–∏–Ω.')
            return

        if drug_user_storage['amount'] < selling_amount:
            await ctx.send('–ù–µ–º–∞—Ç–µ —Ç–æ–ª–∫–∞–≤–∞ –∫–æ–ª–∏—á–∏–Ω–∞ –≤–æ –≤–∞—à–∏–æ—Ç –º–∞–≥–∞—Ü–∏–Ω.')
            return

        police_activity = config_vars_collection.find_one({"_id": 1})['value']

        if check_event_based_on_probability(police_activity):
            if police_activity < drug_dealing_police_dont_arrest or check_event_based_on_probability(
                    police_activity * drug_dealing_escape_chance_multiplier, opposite=True):
                await ctx.send(
                    f"–ó–∞ –≤—Ä–µ–º–µ –Ω–∞ –∑–¥–µ–ª–∫–∞—Ç–∞ —Å–µ –ø–æ—ò–∞–≤–∏ –ø–æ–ª–∏—Ü–∏—ò–∞üöì. –ó–∞ —Å—Ä–µ—ú–∞, **{author_name}** —É—Å–ø–µ–∞ –¥–∞ –∏–∑–±–µ–≥–∞ —Å–æ —Ä–æ–±–∞—Ç–∞üì¶.")
                return

            new_amount = int(drug_user_storage['amount']) - selling_amount

            user_drug_collection.update_one({'_id': f"{author_id} {selected_drug['id']}"},
                                            {"$set": {'amount': new_amount}},
                                            upsert=False)

            embed = nextcord.Embed(
                title=f"–ü–æ–ª–∏—Ü–∏—ò–∞—Ç–∞üöì –∑–Ω–∞–µ—à–µ –∑–∞ –∑–¥–µ–ª–∫–∞—Ç–∞ü§ù. **{author_name}** –±–µ—à–µ —É–∞–ø—Ü–µ–Ω, –∞ —Ä–æ–±–∞—Ç–∞üì¶ –º—É –±–µ—à–µ –∑–∞–ø–ª–µ–Ω–µ—Ç–∞.üò≠üò≠üò≠",
                colour=nextcord.Colour.from_rgb(241, 196, 15)
            )

            jail_time = random.randint(drug_dealing_jail['min_time'], drug_dealing_jail['max_time'])
            jail_cd = curr_time + jail_time
            user_collection.update_one({'_id': author_id}, {"$set": {'jail_cd': jail_cd}}, upsert=False)

            embed.add_field(name='–ò–∑—Ä–µ—á–µ–Ω–∞ –ø—Ä–µ—Å—É–¥–∞:', value=f"{jail_time} —Å–µ–∫—É–Ω–¥–∏ –≤–æ –∑–∞—Ç–≤–æ—Ä.")

            embed.set_image(url=random.choice(crime_caught_images))
            await ctx.send(embed=embed)
            return

        new_amount = int(drug_user_storage['amount']) - selling_amount
        user_drug_collection.update_one({'_id': f"{author_id} {selected_drug['id']}"}, {"$set": {'amount': new_amount}},
                                        upsert=False)

        drug_in_database = drugs_collection.find_one({"_id": selected_drug['id']})
        drug_price = drug_in_database['price'] * selling_amount
        new_balance = user_data['money'] + drug_price
        user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)

        embed = nextcord.Embed(
            title=f"{author_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–≤—Ä—à–∏ –ø—Ä–æ–¥–∞–∂–±–∞ –Ω–∞ {selected_drug['name']}!",
            colour=nextcord.Colour.from_rgb(241, 196, 15)
        )

        embed.add_field(name='–ó–∞—Ä–∞–±–æ—Ç–∫–∞:', value=f"üíµ{drug_price}")
        embed.set_image(url=random.choice(drug_deal_successful_images))
        await ctx.send(embed=embed)

    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='mydrugs')
async def user_list_drugs(ctx):
    try:
        author_id = ctx.message.author.id
        user_drugs = user_drug_collection.find({"user": author_id})

        user_drugs_str = '–í–æ –≤–∞—à–∏–æ—Ç –º–∞–≥–∞—Ü–∏–Ω –∏–º–∞—Ç–µ:\n```'

        for drug in user_drugs:
            if drug['amount'] <= 0: continue
            drug_id = int(drug['_id'].split()[1])
            drug_name = substances_data[drug_id - 1]['name']
            user_drugs_str += f"{drug_name}: {drug['amount']}kg\n"

        user_drugs_str += '```'

        await ctx.send(user_drugs_str)
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@tasks.loop(seconds=drug_market_price_change_period)
async def change_drug_prices():
    try:
        channel = client.get_channel(SUBSTANCES_CHANNEL_ID)

        embed = nextcord.Embed(
            title="–ü—Ä–æ–º–µ–Ω–∏ –Ω–∞ —Ü–µ–Ω–∏—Ç–µ –Ω–∞ –Ω–µ–¥–æ–∑–≤–æ–ª–µ–Ω–∏ —Å—É–ø—Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ —Ü—Ä–Ω–∏–æ—Ç –ø–∞–∑–∞—Ä",
            colour=nextcord.Colour.from_rgb(241, 196, 15)
        )

        drug_list = drugs_collection.find({})
        for document in drug_list:
            substance = substances_data[document['_id'] - 1]
            current_drug_price = document['price']
            old_drug_price = current_drug_price
            price_change = random.randint(substance['min_price_change'], substance['max_price_change'])

            increase_probability = (
                    (substance['max_price'] - current_drug_price) / (substance['max_price'] - substance['min_price']))

            if current_drug_price <= substance['max_price'] and (
                    check_event_based_on_probability(increase_probability) or current_drug_price <= substance[
                'min_price']):
                current_drug_price += price_change
                current_drug_price = clamp_int(current_drug_price, substance['min_price'],
                                               substance['max_price']) + random.randint(1, drug_price_magic_number)
                drugs_collection.update_one({'_id': document['_id']}, {"$set": {'price': current_drug_price}},
                                            upsert=False)
                embed.add_field(name=f"–ü–æ—Å–∫–∞–ø—É–≤–∞—ö–µ –Ω–∞ {substance['name']}",
                                value=f"üíµ{old_drug_price}/kg => üíµ{current_drug_price}/kg", inline=False)
            else:
                current_drug_price -= price_change
                current_drug_price = clamp_int(current_drug_price, substance['min_price'],
                                               substance['max_price']) - random.randint(1, drug_price_magic_number)
                drugs_collection.update_one({'_id': document['_id']}, {"$set": {'price': current_drug_price}},
                                            upsert=False)
                embed.add_field(name=f"–ü–æ–µ–≤—Ç–∏–Ω—É–≤–∞—ö–µ –Ω–∞ {substance['name']}",
                                value=f"üíµ{old_drug_price}/kg => üíµ{current_drug_price}/kg", inline=False)

        police_activity = random.uniform(police_activity_range['min_activity'], police_activity_range['max_activity'])

        config_vars_collection.update_one({'_id': 1}, {"$set": {'value': police_activity}}, upsert=False)
        embed.set_footer(text=f'–®–ø–∏–æ–Ω–∏—Ç–µ –æ–¥ –ø–æ–ª–∏—Ü–∏—ò–∞—Ç–∞ –≤–µ–ª–∞—Ç: {get_police_activity_string(police_activity)}')

        await channel.send(embed=embed)
    except Exception as exc:
        pass


@client.command(name="buygun")
async def buy_gun(ctx, arg1):
    try:
        selected_gun = None
        for gun in gun_data:
            if arg1 == gun['name']:
                selected_gun = gun
                break

        if selected_gun is None:
            await ctx.send('–î–∞–¥–µ–Ω–æ—Ç–æ –æ—Ä—É–∂—ò–µ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.')
            return

        author_id = ctx.message.author.id
        user_data = user_collection.find_one({"_id": author_id})

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**")
            return

        if user_data['money'] < selected_gun['price']:
            await ctx.send('–ù–µ–º–∞—Ç–µ –¥–æ–≤–æ–ª–Ω–æ –ø–∞—Ä–∏.')
            return

        new_balance = user_data['money'] - selected_gun['price']
        user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)

        user_gun_data = user_gun_collection.find_one({"_id": author_id})
        if user_gun_data is None:
            user_gun_collection.insert_one({'_id': author_id, "value": [selected_gun['id']]})
        else:
            user_gun_list = user_gun_data['value']
            if len(user_gun_list) > gun_storage_limit:
                await ctx.send(f"–í–∏–µ –≤–µ—ú–µ –∏–º–∞—Ç–µ {gun_storage_limit} –æ—Ä—É–∂—ò–∞. –ù–µ –º–æ–∂–µ –¥–∞ –∫—É–ø–µ—Ç–µ –ø–æ–≤–µ—ú–µ.")
                return
            user_gun_list.append(selected_gun['id'])
            user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_gun_list}}, upsert=False)

        author_name = ctx.message.author.name
        await ctx.send(f"**{author_name}** –∫—É–ø–∏ {selected_gun['name']}.")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='sellgun')
async def user_sell_gun(ctx, arg1):
    try:
        author_id = ctx.message.author.id
        selected_gun = None
        for gun in gun_data:
            if gun['name'] == arg1:
                selected_gun = gun
                break

        if selected_gun is None:
            await ctx.send('–ù–µ –ø–æ—Å—Ç–æ–∏ —Ç–∞–∫–≤–æ –æ—Ä—É–∂—ò–µ –≤–æ –∏–≥—Ä–∞—Ç–∞.')
            return

        user_guns = user_gun_collection.find_one({'_id': author_id})['value']
        if user_guns is None:
            await ctx.send('–í–∏–µ –Ω–µ–º–∞—Ç–µ –æ—Ä—É–∂—ò–µ.')
            return

        user_data = user_collection.find_one({"_id": author_id})

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**")
            return

        for i in range(0, len(user_guns)):
            if user_guns[i] == selected_gun['id']:
                money_gained = int(selected_gun['price'] * gun_sell_price_penalty)

                new_balance = user_data['money'] + money_gained
                user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)

                del [user_guns[i]]
                user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_guns}})

                await ctx.send(f"**{ctx.message.author.name}** –ø—Ä–æ–¥–∞–¥–µ {selected_gun['name']} –∑–∞ üíµ{money_gained}.")
                return

        await ctx.send('–í–∏–µ –Ω–µ –ø–æ—Å–µ–¥—É–≤–∞—Ç–µ —Ç–∞–∫–≤–æ –æ—Ä—É–∂—ò–µ.')
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name="myguns")
async def user_list_guns(ctx):
    try:
        author_id = ctx.message.author.id
        user_guns = user_gun_collection.find_one({'_id': author_id})

        if len(user_guns['value']) == 0:
            await ctx.send(f"{ctx.message.author.name} –Ω–µ –ø–æ—Å–µ–¥—É–≤–∞ –æ—Ä—É–∂—ò–µ.")
            return

        user_gun_list_str = '`'
        for gun in user_guns['value']:
            gun_name = gun_data[gun]['name']
            user_gun_list_str += f"{gun_name}, "

        user_gun_list_str = user_gun_list_str[:-2]
        user_gun_list_str += '`'
        await ctx.send(f"**{ctx.message.author.name}** –ø–æ—Å–µ–¥—É–≤–∞: {user_gun_list_str}")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name="attack")
async def attack_player(ctx, arg1):
    try:
        eusk = timezone('Europe/Skopje')
        sk_time = datetime.now(eusk)
        hour = int(sk_time.strftime('%H'))
        if 1 <= hour < 17:
            await ctx.send('–ù–∞–ø–∞—ì–∞—ö–µ –µ –≤–æ–∑–º–æ–∂–Ω–æ —Å–∞–º–æ –æ–¥ 17:00 –¥–æ 01:00 —á–∞—Å–æ—Ç —Å–µ–∫–æ—ò –¥–µ–Ω.')
            return

        attacked_user_id = ctx.message.mentions[0].id

        selected_gun = None
        for gun in gun_data:
            if gun['name'] == arg1:
                selected_gun = gun
                break

        if selected_gun is None:
            await ctx.send('–û—Ä—É–∂—ò–µ—Ç–æ –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –Ω–∞ –ª–∏—Å—Ç–∞—Ç–∞.')
            return

        if attacked_user_id is None:
            await ctx.send('–ò–≥—Ä–∞—á–æ—Ç –Ω–µ –µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω.')
            return

        author_id = ctx.message.author.id
        if attacked_user_id == author_id:
            await ctx.send('–ù–µ –º–æ–∂–µ—à –¥–∞ —Å–µ –Ω–∞–ø–∞–¥–Ω–µ—à —Å–∞–º–∏–æ—Ç —Å–µ–±–µ.')
            return

        user_attacking = user_collection.find_one({'_id': author_id})

        curr_time = int(time.time())
        if user_attacking['death_cd'] != 0:
            remaining_death_time = user_attacking['death_cd'] - curr_time
            if user_attacking['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_attacking['jail_cd'] >= curr_time:
            remaining_jail_time = user_attacking['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**.")
            return

        if user_attacking['atk_cd'] >= curr_time:
            remaining_atk_time = user_attacking['atk_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ –Ω–∞–ø–∞–¥–Ω–∞–≤—Ç–µ –ø—Ä–µ–¥ –º–∞–ª–∫—É. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_atk_time)}**.")
            return

        user_guns = user_gun_collection.find_one({'_id': author_id})['value']

        user_gun_arr_index = -1
        for i in range(0, len(user_guns)):
            if user_guns[i] == selected_gun['id']:
                user_gun_arr_index = i
                break

        if user_gun_arr_index == -1:
            await ctx.send('–í–∏–µ –Ω–µ –≥–æ –ø–æ—Å–µ–¥—É–≤–∞—Ç–µ —Ç–æ–∞ –æ—Ä—É–∂—ò–µ.')
            return

        attacked_user = user_collection.find_one({'_id': attacked_user_id})

        user_attacking_level = get_level_based_on_xp(user_attacking['xp'])

        if user_attacking_level < attack_level_requirement:
            await ctx.send(f"–ó–∞ –Ω–∞–ø–∞—ì–∞—ö–µ –µ –ø–æ—Ç—Ä–µ–±–Ω–æ {attack_level_requirement + 1}-—Ç–æ –Ω–∏–≤–æ.")
            return

        if attacked_user is None:
            await ctx.send('–û–≤–æ—ò –∫–æ—Ä–∏—Å–Ω–∏–∫ –∑–∞—Å–µ–≥–∞ –Ω–µ —ò–∞ –∏–≥—Ä–∞ –∏–≥—Ä–∞—Ç–∞.')
            return

        if attacked_user['death_cd'] != 0:
            await ctx.send('–û–≤–æ—ò –∫–æ—Ä–∏—Å–Ω–∏–∫ –µ –≤–µ—ú–µ –º—Ä—Ç–æ–≤.')
            return

        gun_damage = int(
            random.randint(selected_gun['min_damage'],
                           selected_gun['max_damage']) * get_damage_multiplier_based_on_level(
                user_attacking_level))
        gun_damage += base_attack_damage
        attacked_user_health = attacked_user['health'] - gun_damage

        user_collection.update_one({'_id': attacked_user_id}, {"$set": {'health': attacked_user_health}})
        user_attack_cooldown = curr_time + attack_cooldown
        user_collection.update_one({'_id': author_id}, {"$set": {'atk_cd': user_attack_cooldown}})

        if attacked_user_health <= 0:
            embed = nextcord.Embed(
                title=f"{ctx.message.mentions[0].name} –±–µ—à–µ —É–±–∏–µ–Ω –æ–¥ —Å—Ç—Ä–∞–Ω–∞ –Ω–∞ {ctx.message.author.name}",
                colour=nextcord.Colour.from_rgb(241, 196, 15)
            )

            xp_gained = (get_level_based_on_xp(attacked_user['xp']) + 1) * killed_user_xp_multiplier
            new_xp = user_attacking['xp'] + xp_gained
            if new_xp >= levels[19]['xp']:
                new_xp = levels[19]['xp']

            money_gained = int(kill_money_gain_ratio * attacked_user['money']) + kill_min_money
            money_lost = int(death_money_loss_ratio * attacked_user['money'])
            new_balance_attacker = user_attacking['money'] + money_gained
            new_balance_attacked = attacked_user['money'] - money_lost

            user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance_attacker}})
            user_collection.update_one({'_id': attacked_user_id}, {"$set": {'money': new_balance_attacked}})
            embed.add_field(name='–î–æ–±–∏–µ–Ω–æ xp –∏ –ø–∞—Ä–∏:', value=f"+{xp_gained}xp, üíµ{money_gained}", inline=False)

            new_level = get_level_based_on_xp(new_xp)
            if new_level != user_attacking_level:
                embed.add_field(name='–ß–µ—Å—Ç–∏—Ç–∫–∏!', value=f"{ctx.message.author.name} –∫–∞—á–∏ {new_level + 1} –Ω–∏–≤–æ.üéâüéà",
                                inline=False)

            user_collection.update_one({'_id': author_id}, {"$set": {'xp': new_xp}})

            user_death_cd = curr_time + death_cooldown
            user_collection.update_one({'_id': attacked_user_id}, {"$set": {'death_cd': user_death_cd}}, upsert=False)

            businesses = list(business_collection.find({"owner": {"$eq": attacked_user_id}}))

            if len(businesses) > 0:
                lost_businesses_str = ''

                for business_db in businesses:
                    business_collection.update_one({'_id': business_db['_id']}, {"$set": {'owner': 0}})
                    lost_businesses_str += f"{businessdata.businesses_data[business_db['_id']]['name']}, "

                lost_businesses_str = lost_businesses_str[:-2]
                embed.add_field(name='–ò–∑–≥—É–±–µ–Ω–∏ –±–∏–∑–Ω–∏—Å–∏:', value=lost_businesses_str, inline=False)
                business_channel = client.get_channel(BUSINESSES_CHANNEL_ID)
                await business_channel.send(f"–ë–∏–∑–Ω–∏—Å–∏—Ç–µ: {lost_businesses_str} —Å–µ —Å–µ–≥–∞ –¥–æ—Å—Ç–∞–ø–Ω–∏ –∑–∞ –∫—É–ø—É–≤–∞—ö–µ")

            user_collection.update_one({'_id': attacked_user_id}, {"$set": {'death_cd': curr_time + death_cooldown}})

            embed.set_image(url=random.choice(user_killed_images))

            if check_event_based_on_probability(selected_gun['break_chance']):
                del [user_guns[user_gun_arr_index]]
                user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_guns}})
                embed.add_field(name='–û—Ä—É–∂—ò–µ—Ç–æ –±–µ—à–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –æ–¥ –ø–æ–ª–∏—Ü–∏—ò–∞—Ç–∞.',
                                value=f"{ctx.message.author.name} –º–æ—Ä–∞—à–µ –¥–∞ —Å–µ –æ—Å–ª–æ–±–æ–¥–∏ –æ–¥ –æ—Ä—É–∂—ò–µ—Ç–æ.", inline=False)

            await ctx.send(embed=embed)
            return

        embed = nextcord.Embed(
            title=f"{ctx.message.author.name} –≥–æ –Ω–∞–ø–∞–¥–Ω–∞ {ctx.message.mentions[0].name}",
            colour=nextcord.Colour.from_rgb(241, 196, 15)
        )

        xp_gained = (get_level_based_on_xp(attacked_user['xp']) * attack_user_xp_multiplier) + attacking_min_xp
        new_xp = user_attacking['xp'] + xp_gained
        if new_xp >= levels[19]['xp']:
            new_xp = levels[19]['xp']

        money_gained = int(attack_money_gain_ratio * attacked_user['money']) + attacking_min_money
        money_lost = int(attacked_money_loss_ratio * attacked_user['money'])
        new_balance_attacker = user_attacking['money'] + money_gained
        new_balance_attacked = attacked_user['money'] - money_lost

        user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance_attacker}})
        user_collection.update_one({'_id': attacked_user_id}, {"$set": {'money': new_balance_attacked}})
        embed.add_field(name='–î–æ–±–∏–µ–Ω–æ xp –∏ –ø–∞—Ä–∏:', value=f"+{xp_gained}xp, üíµ{money_gained}", inline=False)

        new_level = get_level_based_on_xp(new_xp)
        if new_level != user_attacking_level:
            embed.add_field(name='–ß–µ—Å—Ç–∏—Ç–∫–∏!', value=f"{ctx.message.author.name} –∫–∞—á–∏ {new_level + 1} –Ω–∏–≤–æ.üéâüéà",
                            inline=False)

        user_collection.update_one({'_id': author_id}, {"$set": {'xp': new_xp}})

        if check_event_based_on_probability(selected_gun['break_chance']):
            del [user_guns[user_gun_arr_index]]
            user_gun_collection.update_one({'_id': author_id}, {"$set": {'value': user_guns}})
            embed.add_field(name='–û—Ä—É–∂—ò–µ—Ç–æ –±–µ—à–µ –ø—Ä–æ–Ω–∞—ò–¥–µ–Ω–æ –æ–¥ –ø–æ–ª–∏—Ü–∏—ò–∞—Ç–∞.',
                            value=f"{ctx.message.author.name} –º–æ—Ä–∞—à–µ –¥–∞ —Å–µ –æ—Å–ª–æ–±–æ–¥–∏ –æ–¥ –æ—Ä—É–∂—ò–µ—Ç–æ.", inline=False)

        embed.add_field(name='–ù–∞–ø—Ä–∞–≤–µ–Ω–∞ —à—Ç–µ—Ç–∞:', value=f"{gun_damage}")
        embed.add_field(name='–ù–∞–ø–∞–¥–Ω–∞—Ç–∏–æ—Ç –µ —Å–µ–≥–∞ –Ω–∞:', value=f"{attacked_user_health}hp")

        embed.set_image(url=random.choice(attack_user_images))
        await ctx.send(embed=embed)
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='heal')
async def heal(ctx):
    try:
        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['health'] == max_health:
            await ctx.send(f'–í–∏–µ —Å—Ç–µ –Ω–∞ full hp. –ù–µ–º–∞—Ç–µ –ø–æ—Ç—Ä–µ–±–∞ –æ–¥ –ª–µ—á–µ—ö–µ.')
            return

        curr_time = int(time.time())
        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**")
            return

        if curr_time <= user_data['heal_cd']:
            time_remaining = (curr_time - user_data['heal_cd']) * -1
            await ctx.send(
                f"–í–∏–µ –±–µ–≤—Ç–µ –≤–æ –±–æ–ª–Ω–∏—Ü–∞ —Å–∫–æ—Ä–æ. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(time_remaining)}.**")
            return

        user_health = user_data['health'] + heal_amount
        new_health = clamp_int(user_health, 0, max_health)
        new_balance = int(user_data['money'] * heal_price_factor)

        heal_cd = curr_time + heal_cooldown

        user_collection.update_one({'_id': author_id}, {"$set": {'health': new_health}}, upsert=False)
        user_collection.update_one({'_id': author_id}, {"$set": {'money': new_balance}}, upsert=False)
        user_collection.update_one({'_id': author_id}, {"$set": {'heal_cd': heal_cd}})

        await ctx.send(
            f"**{author_name}** –±–µ—à–µ –≤–æ –±–æ–ª–Ω–∏—Ü–∞. –°–µ–≥–∞ –µ –Ω–∞ **ü©∏{new_health}** hp, –∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ç–µ —Ç—Ä–æ—à–æ—Ü–∏ –∫–æ—à—Ç–∞–∞ **üíµ{int(user_data['money'] * (1 - heal_price_factor))}**.")
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@client.command(name='buybusiness')
async def buy_business(ctx, arg):
    try:
        author_id = ctx.message.author.id
        author_name = ctx.message.author.name

        selected_business = None
        for business in businessdata.businesses_data:
            if business['command'] == arg:
                selected_business = business
                break

        if selected_business is None:
            await ctx.send("–ù–µ –ø–æ—Å—Ç–æ–∏ —Ç–∞–∫–æ–≤ –±–∏–∑–Ω–∏—Å. –ü—Ä–æ–≤–µ—Ä–µ—Ç–µ —ò–∞ –ª–∏—Å—Ç–∞—Ç–∞.")
            return

        user_data = user_collection.find_one({'_id': author_id})

        if user_data is None:
            await ctx.send(f'–í–∏–µ –Ω–µ —Å—Ç–µ –Ω–∞—ò–∞–≤–µ–Ω–∏. –ó–∞ –¥–∞ –ø–æ—á–Ω–µ—Ç–µ —Å–æ –∏–≥—Ä–∞—Ç–∞ –Ω–∞–ø–∏—à–µ—Ç–µ {BOT_PREFIX}signup.')
            return

        curr_time = int(time.time())
        if user_data['death_cd'] != 0:
            remaining_death_time = user_data['death_cd'] - curr_time
            if user_data['death_cd'] >= curr_time:
                await ctx.send(
                    f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. –ú–æ–∂–µ –¥–∞ respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn** –∑–∞ **{get_formatted_min_secs(remaining_death_time)}**.")
            else:
                await ctx.send(f"–í–∏–µ —Å—Ç–µ –º—Ä—Ç–≤–∏. Respawn-–µ—Ç–µ —Å–æ **{BOT_PREFIX}respawn**.")
            return

        if user_data['jail_cd'] >= curr_time:
            remaining_jail_time = user_data['jail_cd'] - curr_time
            await ctx.send(
                f"–í–∏–µ —Å—Ç–µ –≤–æ –∑–∞—Ç–≤–æ—Ä. –û–±–∏–¥–µ—Ç–µ —Å–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞ **{get_formatted_min_secs(remaining_jail_time)}**")
            return

        if user_data['money'] <= selected_business['price']:
            await ctx.send(
                f"–í–∏–µ –Ω–µ–º–∞—Ç–µ –¥–æ–≤–æ–ª–Ω–æ –ø–∞—Ä–∏ –∑–∞ –¥–∞ –≥–æ –∫—É–ø–∏—Ç–µ –æ–≤–æ—ò –±–∏–∑–Ω–∏—Å. –í–∏–µ –∏–º–∞—Ç–µ: **üíµ{user_data['money']}**. –ü–æ—Ç—Ä–µ–±–Ω–∏ —Å–µ: **${selected_business['price']}**")
            return

        bussines_in_data = business_collection.find_one({"_id": selected_business['id']})
        if bussines_in_data['owner'] != 0:
            await ctx.send(
                "–û–≤–æ—ò –±–∏–∑–Ω–∏—Å –≤–µ—ú–µ –∏–º–∞ —Å–æ–ø—Å—Ç–≤–µ–Ω–∏–∫. –ó–∞ –æ–≤–æ—ò –±–∏–∑–Ω–∏—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ –¥–∞ –±–∏–¥–µ –¥–æ—Å—Ç–∞–ø–µ–Ω –∑–∞ –∫—É–ø—É–≤–∞—ö–µ, —Å–æ–ø—Å—Ç–≤–µ–Ω–∏–∫–æ—Ç –º–æ—Ä–∞ –¥–∞ –±–∏–¥–µ –ª–∏–∫–≤–∏–¥–∏—Ä–∞–Ω.")
            return

        new_balance = int(user_data['money'] - selected_business['price'])
        user_collection.update_one({"_id": author_id}, {"$set": {'money': new_balance}}, upsert=False)
        business_collection.update_one({"_id": selected_business['id']}, {"$set": {'owner': author_id}}, upsert=False)

        business_str = f"**{author_name}** –≥–æ –∫—É–ø–∏ –±–∏–∑–Ω–∏—Å–æ—Ç **{selected_business['name']}** –∑–∞ **üíµ{selected_business['price']}**."
        await ctx.send(business_str)
        channel = client.get_channel(BUSINESSES_CHANNEL_ID)
        await channel.send(business_str)
    except Exception as exc:
        await ctx.send(traceback.format_exc())


@tasks.loop(seconds=7203)
async def cash_in_business():
    try:
        businesses_in_db = business_collection.find({"owner": {"$ne": 0}})
        businesses_str = '**–ü–∞—Ä–∏ –∑–∞—Ä–∞–±–æ—Ç–µ–Ω–∏ –æ–¥ –±–∏–∑–Ω–∏—Å–∏**\n'
        channel = client.get_channel(BUSINESSES_CHANNEL_ID)
        await channel.send(businesses_str)

        for business_db in businesses_in_db:
            username = await client.fetch_user(business_db['owner'])
            curr_business = businessdata.businesses_data[business_db['_id']]
            money_earned = random.randint(curr_business['min_profit'], curr_business['max_profit'])
            businesses_str = f"{curr_business['name']}, **{username}** –∑–∞—Ä–∞–±–æ—Ç–∏ **üíµ{money_earned}**.\n"
            user_data = user_collection.find_one({"_id": business_db['owner']})
            new_balance = user_data['money'] + money_earned
            user_collection.update_one({'_id': business_db['owner']}, {"$set": {'money': new_balance}}, upsert=False)
            await channel.send(businesses_str)

    except Exception as exc:
        pass


TOKEN = os.environ['BOT_TOKEN']
keep_alive()
client.run(TOKEN)
